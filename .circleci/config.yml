# Following stanza uses CircleCI 2.1 to make use of a executors, commands and orbs
version: 2.1

# TODO add the orb to handle AWS deployment ? aws-ecs? 
# TODO try to use sh instead of compare-url orb NOTE but probably we should use the orb, it is a lot of staff to check for correct detection of changes,
# TODO see the log of orb reconstruction!
orbs:
  slack: circleci/slack@3.3.0
  circle-compare-url: iynere/compare-url@1.1.0
  # aws-ecr: circleci/aws-ecr@0.0.4
  # aws-ecs: circleci/aws-ecs@0.0.3
  # unable to use aws orbs because app-specific builds

# Note: CircleCI occasionally makes scheduled changes to images to fix bugs or otherwise improve functionality, 
# and these changes can sometimes cause affect how images work in CircleCI jobs. 
# Please follow the convenience-images tag on Discuss to be notified in advance of scheduled maintenance.
# TODO We can create our oun image to speed up builds: https://circleci.com/docs/2.0/private-images/
# Here I use image from https://hub.docker.com/r/circleci/node/, with an appropriate docker version
# Use circleci/node:10.13.0-jessie for the version without browsers installed
# TODO Now, gui_public-web uses 652400735483.dkr.ecr.eu-west-1.amazonaws.com/infrastructure_docker-node-alpine:10.14.1
# TODO We can create different images for different apps and use them for different executors, see 'executors section' TODO

# Using an image hosted on AWS ECR requires authentication using AWS credentials. 
# By default, CircleCI uses the AWS credentials that you add to the Project > Settings > AWS Permissions page in the CircleCI application 
# or by setting the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY project environment variables. 
# It is also possible to set the credentials by using aws_auth field as in the following example:
# Template for download our custom images from AWS:
# jobs:
#   build:
#     docker:
#       - image: account-id.dkr.ecr.us-east-1.amazonaws.com/org/repo:0.1
#         aws_auth:
#           aws_access_key_id: AKIAQWERVA  # can specify string literal values
#           aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY  # or project UI envar reference

# TODO We can create different images for different apps and use them for different executors
# TODO NOTE we can define environment specific for every executor, see commented out code!
# TODO Those executors can be called for app-specific jobs, we can run steps conditionally, look after 'when' in documentation
executors:
  executor1:
    # environment:
    # ENV: CI
    docker:
      - image: circleci/node:10.13.0-jessie-browsers

# commands: # DRY, defines a sequence of steps as a map to be executed in a job, enabling you to reuse a single command definition across multiple jobs.
# TODO check the file after completing of working prototype, maybe can be useful in optimization step 

jobs:
  detect:
    executor: executor1
    working_directory: ~/tmp
    steps:
      - checkout
      - circle-compare-url/reconstruct
      - run: 
          name: Detecting changed sub-repositories to trigger builds
          command: |
            echo -e "Detecting changed sub-repositories to trigger builds\n"
            echo -e "Branch: $CIRCLE_BRANCH" 
            # we can use $CIRCLE_BRANCH as trigger for branch-specific jobs, but filters used instead for whitelisting/blacklisting execution of some branches.
            
            # save value stored in file to a local env var
            CIRCLE_COMPARE_URL=$(cat CIRCLE_COMPARE_URL.txt)

            COMMIT_RANGE=$(echo $CIRCLE_COMPARE_URL | sed 's:^.*/compare/::g')
            echo -e "Commit range: $COMMIT_RANGE"
            
            echo -e "checking if common files changed"
            echo -e "------------------------ step 1 - checking COMMON directory for changed files ------------------------------"

            forceallbuilds=1 #false , this global var should be our trigger to force all builds 

            for COMMON in common/*/; 
              do
                commonname=$(basename $COMMON)
                if [[ $(git diff $COMMIT_RANGE --name-status | grep "$commonname") ]]; then
                  echo "Changed files in  ${commonname} directory! We should build all the applications..."
                  forceallbuilds=0
                  break
                  # Logic : if some of files in the /common/ directory was changed, we should build all the applications
                  # TODO Advanced logic: detect workspace names of changed common packages and check affected applications by filtering dependencies
                  # TODO do  not skip the next steps (checking core and other root directories, another applications can be affected by them)
                  # TODO if advance logic will be applied - handle it another way, probably save a list of affected applications in the workspace
                else
                  echo "${commonname} not modified, forceallbuilds == ${forceallbuilds}"
                fi
                echo "------------------------------------------------------"
              done

            if [[ ${forceallbuilds} != 0 ]]; then # else, all builds are already forced
              echo -e "No changed files in the COMMON directory, checking if CORE files changed"
              echo -e "------------------------ step 2 - checking CORE directory for changed files ------------------------------"
              for CORE in core/*/;
                do
                  corename=$(basename $CORE)
                  if [[ $(git diff $COMMIT_RANGE --name-status | grep "$corename") ]]; then
                    echo "Detected changed files in  ${corename} directory! We should build all the applications..."
                    forceallbuilds=0
                    break
                    # Logic : if some of files in the /core/ directory was changed, we should build all the applications
                    # TODO Advanced logic: see comments for COMMON for-loop
                  else
                    echo "${corename} not modified, forceallbuilds == ${forceallbuilds}"
                  fi
                  echo "------------------------------------------------------"
                done
            else
              echo "Skipping check step for CORE, because COMMON files changed "
            fi

            # if no files changed in CORE and COMMON, check root files and .circleci


            if [[ ${forceallbuilds} != 0 ]]; then # else, all builds are already forced
              # changed_root_files=()
              echo "Probably, root files (or /.circleci/) changed, check them all"
              # Exclude README and LICENSE, maybe more
              # changed_root_files=`git diff $COMMIT_RANGE --name-only | grep -v -e README -e LICENSE || : | awk '{print $1}'` # can't use '.' as FS because .* files
              # if ((${changed_root_files})); then
              if [[ $(git diff $COMMIT_RANGE --name-only | grep -v -e README -e LICENSE) ]]; then
                echo "Root files was changed"
                forceallbuilds=0
              else
                echo "No files changed in the root / .circleci, check apps directory "
              fi
            fi
            
            changedapps=()

            if [[ ${forceallbuilds} != 0 ]]; then # else, all builds are already forced
              echo -e "No changed files in the COMMON and CORE directories, checking if APPS files changed"
              echo -e "------------------------ step 3 - checking APPS directory for changed files ------------------------------"
              for APP in apps/*/;
                do
                  appname=$(basename $APP)
                  if [[ $(git diff $COMMIT_RANGE --name-status | grep "$appname") ]]; then
                    echo "Detected changed files in  ${appname} directory! Adding the ${appname} application to the list..."
                    changedapps+=" ${appname}"
                  else
                    echo "${appname} not modified;"
                  fi
                  echo "------------------------------------------------------"
                done
            else
              echo "Skipping check step for APPS, because COMMON or CORE or root files changed "
              # TODO refactoring, DRY ?
              for APP in apps/*/; do
                appname=$(basename $APP)
                changedapps+=" ${appname}"
              done
            fi

            echo -e "Changed applications : ${changedapps}"

            mkdir -p workspace
            echo ${changedapps} > workspace/changedapps

            if [[ ${changedapps} ]]; then
              echo -e "We should test and build apps: ${changedapps}"
            else
              echo -e "We should not build any app, only LICENSE or README changed"
              circleci step halt
              exit 0
            fi
      # Persist the specified paths (workspace/changedapps) into the workspace for use in test / build-and-push & deploy jobs. 
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is 
          # taken to be the root directory of the workspace.
          root: workspace
          # Must be relative path from root
          paths:
          - changedapps

      # List of changed apps generated.
      # Contains all the apps if /common/ | /core/ | root changed,
      # or only names of changed packages in the /apps/

      # Double - check if not empty before running tests
    
  test:
    executor: executor1
    working_directory: ~/tmp
    steps:
      - checkout # trying to skip it because checked out at the build step
      - attach_workspace:
          at: ~/tmp/workspace
      - run:
          name: Installing dependencies
          command: yarn install
      - run:
          name: Testing only applications from application list
          command: |
            echo "------------------------------------------------------"
            echo -e "Trying to get list of applications generated via previous job"
            changedapps=`cat ~/tmp/workspace/changedapps`
            echo -e "Changed applications : ${changedapps}"
            ls
            cd apps
            ls

            # Iterate on each service and run the packaging script
            for app in $changedapps
            do
                echo "-------------------Running tests for $app---------------------"

                cd $app
                yarn test
                cd ..
            done
      # Persist the specified paths (workspace/changedapps) into the workspace for use in test / build-and-push & deploy jobs.
      - persist_to_workspace:
          root: workspace
          # Must be relative path from root
          paths:
          - ./

  build-and-push:
    executor: executor1
    working_directory: ~/tmp
    steps:
      - attach_workspace:
          at: ~/tmp/workspace
      - run:
          name: Building apps from list to ECR
          command: |
            echo "------------------------------------------------------"
            echo -e "Trying to get list of applications generated via previous job"
            changedapps=`cat ~/tmp/workspace/changedapps`
            echo -e "Changed applications : ${changedapps}"

            cd workspace

            # Iterate on each service and run the packaging script
            for app in $changedapps
            do
                echo "-------------------Running build for $app---------------------"
                ls

                cd $app
                yarn test
                cd ..
            done
      # - aws-ecr/build_and_push_image:
      #     account-url: '${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com'
      #     repo: '${MY_APP_PREFIX}'
      #     region: '${AWS_REGION}'
      #     tag: '${CIRCLE_SHA1}'
      # - aws-ecs/deploy-service-update:
      #     requires:
      #       - aws-ecr/build_and_push_image
      #     family: '${MY_APP_PREFIX}-service'
      #     cluster-name: '${MY_APP_PREFIX}-cluster'
      #     container-image-name-updates: 'container=${MY_APP_PREFIX}-service,tag=${CIRCLE_SHA1}'

  # TODO caching on build step ?

  #   steps:
  #     # pre-defined command, reserved word
  #     - checkout
  #     # TODO configure cache
  #     # Download and cache dependencies ? 
  #     # TODO we should handle app-specific package.json
  #     - restore_cache:
  #         keys:
  #           - v1-dependencies-{{ checksum "package.json" }}
  #           # fallback to using the latest cache if no exact match is found
  #           - v1-dependencies-

  #     - run: yarn install

  #     - save_cache:
  #         paths:
  #           - node_modules
  #         key: v1-dependencies-{{ checksum "package.json" }}
# TODO Implement all the steps which we have in Jenkins plus approval step and slack notifications

workflows:
  version: 2
  detect-and-persist:
    jobs:
      - detect:
          filters:
            branches:
              only: /master/
      - test:
          requires: # test will not run until the `build` job is completed.
            - detect
          filters:
            branches:
              only: /master/
      # - hold: # <<< A job that will require manual approval in the CircleCI web application.
      #     type: approval # <<< This key-value pair will set your workflow to a status of "On Hold"
      #     requires: # We only run the "hold" job when test2 has succeeded
      #       - test
      #     filters:
      #       branches:
      #         only: /master/
      #     # On approval of the `hold` job, any successive job that requires the `hold` job will run. 
      #     #    In this case, a user is manually triggering the   build-and-push job.
      - build-and-push:
          requires:
            - test
      # - deploy:
      #     requires:
      #       - hold

# We can use it to run nightly builds for master branch - now we update prod every morning, should we do the same or use approval step as well or as alternative?
# cron chould be edit in accordance with the AWS scheduling
    # nightly:
    #    triggers:
    #        - schedule:
    #            cron: "0 22 * * *"
    #            filters:
    #                branches:
    #                    only:
    #                        - master
#
# Documentation page for workflows: https://circleci.com/docs/2.0/configuration-reference/#workflows
# TODO try to persist to workspace all files checked out from repo during detect job, to retrieve them


